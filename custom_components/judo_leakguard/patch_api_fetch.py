from pathlib import Path

path = Path("api.py")
text = path.read_text()
old = "    async def _fetch_json(self, path: str) -> Optional[Dict[str, Any]]:\n        \"\"\"Fetch JSON; gibt None bei 404/Fehlern zur\\u026cck, ohne Exceptions nach au\u00dfYen zu werfen.\"\"\"\n        url = self._url(path)\n        try:\n            async with self._session.get(url, timeout=self._timeout, ssl=self._verify_ssl) as resp:\n                if resp.status == 404:\n                    return None\n                resp.raise_for_status()\n                text = await resp.text()\n                if not text:\n                    return None\n                return json.loads(text)\n        except asyncio.TimeoutError:\n            _LOGGER.debug(\"Timeout GET %s\", url)\n            return None\n        except Exception as exc:\n            _LOGGER.debug(\"Fetch failed for %s: %s\", url, exc)\n            return None\n\n"
new = "    async def _fetch_json(self, path: str) -> Optional[Dict[str, Any]]:\n        \"\"\"Fetch JSON from the device. Returns None for 404 responses.\"\"\"\n        url = self._url(path)\n        try:\n            async with self._session.get(\n                url,\n                timeout=self._timeout,\n                ssl=self._verify_ssl,\n                auth=self._auth,\n            ) as resp:\n                if resp.status == 404:\n                    return None\n                if resp.status in (401, 403):\n                    raise JudoAuthenticationError(f\"Authentication failed for {url} (status={resp.status})\")\n                resp.raise_for_status()\n                text = await resp.text()\n                if not text:\n                    return None\n                return json.loads(text)\n        except JudoAuthenticationError:\n            raise\n        except asyncio.TimeoutError as exc:\n            raise JudoConnectionError(f\"Timeout while requesting {url}\") from exc\n        except aiohttp.ClientConnectorError as exc:\n            raise JudoConnectionError(f\"Cannot connect to {url}: {exc}\") from exc\n        except aiohttp.ClientResponseError as exc:\n            if exc.status == 404:\n                return None\n            if exc.status in (401, 403):\n                raise JudoAuthenticationError(f\"Authentication failed for {url} (status={exc.status})\") from exc\n            _LOGGER.debug(\"Unexpected response from %s: %s\", url, exc)\n            return None\n        except aiohttp.ClientError as exc:\n            raise JudoConnectionError(f\"Client error while requesting {url}: {exc}\") from exc\n        except json.JSONDecodeError as exc:\n            _LOGGER.debug(\"Invalid JSON from %s: %s\", url, exc)\n            return None\n        except Exception as exc:\n            _LOGGER.debug(\"Fetch failed for %s: %s\", url, exc)\n            return None\n\n"
if old not in text:
    raise SystemExit("_fetch_json snippet not found")
path.write_text(text.replace(old, new, 1))
